     1                                  ;interview.asm
     2                                  ;********************************************************************************************
     3                                  ; Program name:          Interview for Specific Applicants                                  *
     4                                  ; Programming Language:  x86 Assembly                                                       *
     5                                  ; Program Description:   This program asks a user certain questions for their interview,    *
     6                                  ;                        then will receive a job salary/offer.                              *
     7                                  ;                                                                                           *
     8                                  ;********************************************************************************************
     9                                  ; Author Information:                                                                       *
    10                                  ; Name:         Kaitlin Frani                                                               *
    11                                  ; Email:        kaitlinfrani@csu.fullerton.edu                                              *
    12                                  ; Course:       CPSC 240-05 Assembly Language                                               *
    13                                  ;                                                                                           *
    14                                  ;********************************************************************************************
    15                                  ; Copyright (C) 2021 Kaitlin Frani                                                          *
    16                                  ; This program is free software: you can redistribute it and/or modify it under the terms   *
    17                                  ; of the GNU General Public License version 3 as published by the Free Software Foundation. *
    18                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY  *
    19                                  ; without even the implied Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. *
    20                                  ; See the GNU General Public License for more details. A copy of the GNU General Public     *
    21                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    22                                  ;                                                                                           *
    23                                  ;********************************************************************************************
    24                                  ;  Program information                                                                      *
    25                                  ;  Program name: Interview for Specific Applicants                                                             *
    26                                  ;  Programming languages: One module in C++, One module in X86                              *
    27                                  ;  Files in this program: interview.asm, main.cpp                                           *
    28                                  ;                                                                                           *
    29                                  ;********************************************************************************************
    30                                  ; This File                                                                                 *
    31                                  ;    Name:      interview.asm                                                               *
    32                                  ;    Purpose:   To have the dialogue occur, asking for user input and returns it to         *
    33                                  ;               main.cpp to display the correct offer.                                      *
    34                                  ;    Link: g++ -m64 -no-pie -o job_interview.out -std=c++17 interview.o main.o -std=c++17   *
    35                                  ;********************************************************************************************
    36                                  
    37                                  ;--------------------INITIALIZING VARIABLES--------------------------------------------
    38                                  extern printf
    39                                  extern scanf
    40                                  
    41                                  global interview
    42                                  
    43                                  section .data
    44 00000000 257300                      stringFormat db "%s", 0
    45 00000003 256C6600                    floatFormat db "%lf", 0
    46 00000007 48656C6C6F2025732E-         intro db "Hello %s. I am Ms Fenster. The interview will begin now.", 10, 0
    46 00000010 204920616D204D7320-
    46 00000019 46656E737465722E20-
    46 00000022 54686520696E746572-
    46 0000002B 766965772077696C6C-
    46 00000034 20626567696E206E6F-
    46 0000003D 772E0A00           
    47 00000041 576F7721202425312E-         amount db "Wow! $%1.2lf That's a lot of cash. Who do you think you are, Chris Sawyer (y or n)?", 10, 0
    47 0000004A 326C66205468617427-
    47 00000053 732061206C6F74206F-
    47 0000005C 6620636173682E2057-
    47 00000065 686F20646F20796F75-
    47 0000006E 207468696E6B20796F-
    47 00000077 75206172652C204368-
    47 00000080 726973205361777965-
    47 00000089 72202879206F72206E-
    47 00000092 293F0A00           
    48 00000096 416C72696768742E20-         electricity_intro db "Alright. Now we will work on your electricity.", 10, 0
    48 0000009F 4E6F77207765207769-
    48 000000A8 6C6C20776F726B206F-
    48 000000B1 6E20796F757220656C-
    48 000000BA 656374726963697479-
    48 000000C3 2E0A00             
    49 000000C6 506C6561736520656E-         enter_resistance1 db "Please enter the resistance of circuit #1 in ohms: ", 0
    49 000000CF 746572207468652072-
    49 000000D8 6573697374616E6365-
    49 000000E1 206F66206369726375-
    49 000000EA 697420233120696E20-
    49 000000F3 6F686D733A2000     
    50 000000FA 576861742069732074-         enter_resistance2 db "What is the resistance of circuit #2 in ohms: ", 0
    50 00000103 686520726573697374-
    50 0000010C 616E6365206F662063-
    50 00000115 697263756974202332-
    50 0000011E 20696E206F686D733A-
    50 00000127 2000               
    51 00000129 54686520746F74616C-         total_resistance db "The total resistance is %1.3lf Ohms.", 10, 0
    51 00000132 20726573697374616E-
    51 0000013B 63652069732025312E-
    51 00000144 336C66204F686D732E-
    51 0000014D 0A00               
    52 0000014F 5765726520796F7520-         cs_prompt db "Were you a computer science major (y or n)? ", 0
    52 00000158 6120636F6D70757465-
    52 00000161 7220736369656E6365-
    52 0000016A 206D616A6F72202879-
    52 00000173 206F72206E293F2000 
    53 0000017C 5468616E6B20796F75-         goodbye db "Thank you.  Please follow the exit signs to the front desk.", 10, 0
    53 00000185 2E2020506C65617365-
    53 0000018E 20666F6C6C6F772074-
    53 00000197 686520657869742073-
    53 000001A0 69676E7320746F2074-
    53 000001A9 68652066726F6E7420-
    53 000001B2 6465736B2E0A00     
    54                                  
    55                                  section .bss
    56                                  section .text
    57                                  
    58                                  interview:
    59                                  
    60                                  ;Back up all registers and set the stack pointer to base pointer
    61 00000000 55                      push rbp                                                    ;Backup rbp
    62 00000001 4889E5                  mov  rbp,rsp                                                ;The base pointer now points to top of stack
    63 00000004 57                      push rdi                                                    ;Backup rdi
    64 00000005 56                      push rsi                                                    ;Backup rsi
    65 00000006 52                      push rdx                                                    ;Backup rdx
    66 00000007 51                      push rcx                                                    ;Backup rcx
    67 00000008 4150                    push r8                                                     ;Backup r8
    68 0000000A 4151                    push r9                                                     ;Backup r9
    69 0000000C 4152                    push r10                                                    ;Backup r10
    70 0000000E 4153                    push r11                                                    ;Backup r11
    71 00000010 4154                    push r12                                                    ;Backup r12
    72 00000012 4155                    push r13                                                    ;Backup r13
    73 00000014 4156                    push r14                                                    ;Backup r14
    74 00000016 4157                    push r15                                                    ;Backup r15
    75 00000018 53                      push rbx                                                    ;Backup rbx
    76 00000019 9C                      pushf                                                       ;Backup rflags
    77                                  
    78 0000001A 6AFF                    push qword -1                                               ;extra push to create even number of pushes
    79                                  
    80                                  ;-----------------------INITIALIZE PARAMETERS------------------------------------
    81 0000001C 4989C7                  mov r15, rax        ;name
    82 0000001F F2440F10F8              movsd xmm15, xmm0   ;salary
    83                                  
    84                                  ;------------------------INTRO PROMPT--------------------------------------------
    85 00000024 6A00                    push qword 0
    86 00000026 B800000000              mov rax, 0
    87 0000002B 48BF-                   mov rdi, intro
    87 0000002D [0700000000000000] 
    88 00000035 4C89FE                  mov rsi, r15
    89 00000038 E8(00000000)            call printf
    90 0000003D 58                      pop rax
    91                                  
    92                                  ;-------------------------SALARY PROMPT------------------------------------------
    93 0000003E 6A00                    push qword 0
    94 00000040 B801000000              mov rax, 1
    95 00000045 48BF-                   mov rdi, amount
    95 00000047 [4100000000000000] 
    96 0000004F F2410F10C7              movsd xmm0, xmm15
    97 00000054 E8(00000000)            call printf
    98 00000059 58                      pop rax
    99                                  
   100                                  ;-----------------------Y/N INPUT------------------------------------------------
   101 0000005A 6A00                    push qword 0
   102 0000005C B800000000              mov rax, 0
   103 00000061 48BF-                   mov rdi, stringFormat
   103 00000063 [0000000000000000] 
   104 0000006B 4889E6                  mov rsi, rsp
   105 0000006E E8(00000000)            call scanf
   106 00000073 58                      pop rax
   107                                  
   108 00000074 41BE79000000            mov r14, 'y'
   109 0000007A 4C39F0                  cmp rax, r14
   110                                  ;jump to electricity_test if not equal to yes
   111 0000007D 7514                    jne electricity_test
   112                                  
   113                                  ;return 1 million to driver, if yes go to end
   114 0000007F 48B80000000080842E-     mov rax, 0x412E848000000000
   114 00000088 41                 
   115 00000089 664C0F6EF0              movq xmm14, rax
   116 0000008E E923010000              jmp end
   117                                  
   118                                  ;-------------------ELECTRICITY TEST---------------------------------------------
   119                                  electricity_test:
   120                                  ;"We will work on your electricity"
   121 00000093 6A00                    push qword 0
   122 00000095 B800000000              mov rax, 0
   123 0000009A 48BF-                   mov rdi, electricity_intro
   123 0000009C [9600000000000000] 
   124 000000A4 E8(00000000)            call printf
   125 000000A9 58                      pop rax
   126                                  
   127                                  ;first resistance
   128 000000AA 6A00                    push qword 0
   129 000000AC B800000000              mov rax, 0
   130 000000B1 48BF-                   mov rdi, enter_resistance1
   130 000000B3 [C600000000000000] 
   131 000000BB E8(00000000)            call printf
   132 000000C0 58                      pop rax
   133                                  
   134                                  ;resistance 1 input in xmm13
   135 000000C1 B801000000              mov rax, 1
   136 000000C6 48BF-                   mov rdi, floatFormat
   136 000000C8 [0300000000000000] 
   137 000000D0 6A00                    push qword 0
   138 000000D2 4889E6                  mov rsi, rsp
   139 000000D5 E8(00000000)            call scanf
   140 000000DA F2440F10E8              movsd xmm13, xmm0
   141 000000DF 58                      pop rax
   142                                  
   143                                  ;second resistance
   144 000000E0 6A00                    push qword 0
   145 000000E2 B800000000              mov rax, 0
   146 000000E7 48BF-                   mov rdi, enter_resistance2
   146 000000E9 [FA00000000000000] 
   147 000000F1 E8(00000000)            call printf
   148 000000F6 58                      pop rax
   149                                  
   150                                  ;resistance 2 input in xmm12
   151 000000F7 B801000000              mov rax, 1
   152 000000FC 48BF-                   mov rdi, floatFormat
   152 000000FE [0300000000000000] 
   153 00000106 6A00                    push qword 0
   154 00000108 4889E6                  mov rsi, rsp
   155 0000010B E8(00000000)            call scanf
   156 00000110 F2440F10E0              movsd xmm12, xmm0
   157 00000115 58                      pop rax
   158                                  
   159                                  ;------------------------ELECTRICITY CALCULATION---------------------------------
   160                                  ;Set 1 to 1.0 floating for 1/resistance
   161 00000116 48B8000000000000FF-     mov rax, 0x3FF000000000000
   161 0000011F 03                 
   162                                  ;Put into xmm registers for floating calculation
   163 00000120 664C0F6ED8              movq xmm11, rax
   164 00000125 F2450F10D3              movsd xmm10, xmm11
   165 0000012A F2450F10CB              movsd xmm9, xmm11
   166                                  
   167                                  ;1/resistance then add the resistances
   168 0000012F F2450F5EDD              divsd xmm11, xmm13
   169 00000134 F2450F5ED4              divsd xmm10, xmm12
   170 00000139 F2450F58DA              addsd xmm11, xmm10
   171 0000013E F2450F5ECB              divsd xmm9, xmm11
   172                                  
   173                                  ;-----------------------TOTAL RESISTANCE PROMPT----------------------------------
   174 00000143 6A00                    push qword 0
   175 00000145 B801000000              mov rax, 1
   176 0000014A 48BF-                   mov rdi, total_resistance
   176 0000014C [2901000000000000] 
   177 00000154 F2410F10C1              movsd xmm0, xmm9
   178 00000159 E8(00000000)            call printf
   179 0000015E 58                      pop rax
   180                                  
   181                                  ;-----------------------CS MAJOR PROMPT------------------------------------------
   182 0000015F 6A00                    push qword 0
   183 00000161 B800000000              mov rax, 0
   184 00000166 48BF-                   mov rdi, cs_prompt
   184 00000168 [4F01000000000000] 
   185 00000170 E8(00000000)            call printf
   186 00000175 58                      pop rax
   187                                  
   188 00000176 6A00                    push qword 0
   189 00000178 48BF-                   mov rdi, stringFormat
   189 0000017A [0000000000000000] 
   190 00000182 4889E6                  mov rsi, rsp
   191 00000185 E8(00000000)            call scanf
   192 0000018A 58                      pop rax
   193                                  
   194 0000018B 41BE79000000            mov r14, 'y'
   195 00000191 4C39F0                  cmp rax, r14
   196                                  ;if yes go to cs major
   197 00000194 7411                    je cs_major
   198                                  
   199                                  ;for the social major, salary is 1200.12
   200                                  ;go to end
   201 00000196 48B814AE47E17AC092-     mov rax, 0x4092C07AE147AE14
   201 0000019F 40                 
   202 000001A0 664C0F6EF0              movq xmm14, rax
   203 000001A5 EB0F                    jmp end
   204                                  
   205                                  ;if yes, salary is 88000.88
   206                                  cs_major:
   207 000001A7 48B848E17A140E7CF5-     mov rax, 0x40F57C0E147AE148
   207 000001B0 40                 
   208 000001B1 664C0F6EF0              movq xmm14, rax
   209                                  
   210                                  end:
   211 000001B6 6A00                    push qword 0
   212 000001B8 B800000000              mov rax, 0
   213 000001BD 48BF-                   mov rdi, goodbye
   213 000001BF [7C01000000000000] 
   214 000001C7 E8(00000000)            call printf
   215 000001CC 58                      pop rax
   216                                  
   217                                  ;Restore the original values to the general registers before returning to the caller.
   218 000001CD 58                      pop rax                                                     ;Remove the extra -1 from the stack
   219 000001CE 9D                      popf                                                        ;Restore rflags
   220 000001CF 5B                      pop rbx                                                     ;Restore rbx
   221 000001D0 415F                    pop r15                                                     ;Restore r15
   222 000001D2 415E                    pop r14                                                     ;Restore r14
   223 000001D4 415D                    pop r13                                                     ;Restore r13
   224 000001D6 415C                    pop r12                                                     ;Restore r12
   225 000001D8 415B                    pop r11                                                     ;Restore r11
   226 000001DA 415A                    pop r10                                                     ;Restore r10
   227 000001DC 4159                    pop r9                                                      ;Restore r9
   228 000001DE 4158                    pop r8                                                      ;Restore r8
   229 000001E0 59                      pop rcx                                                     ;Restore rcx
   230 000001E1 5A                      pop rdx                                                     ;Restore rdx
   231 000001E2 5E                      pop rsi                                                     ;Restore rsi
   232 000001E3 5F                      pop rdi                                                     ;Restore rdi
   233 000001E4 5D                      pop rbp                                                     ;Restore rbp
   234                                  
   235 000001E5 F2410F10C6              movsd xmm0, xmm14
   236 000001EA C3                      ret
