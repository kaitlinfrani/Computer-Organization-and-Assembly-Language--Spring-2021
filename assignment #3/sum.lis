     1                                  ;********************************************************************************************
     2                                  ; Program name:          Sum of Float Numbers in an Array                                   *
     3                                  ; Programming Language:  x86 Assembly                                                       *
     4                                  ; Program Description:   This program asks a user to input floats into an array and         *
     5                                  ;                        returns the floats entered and sum of floats in the array.         *
     6                                  ;                                                                                           *
     7                                  ;********************************************************************************************
     8                                  ; Author Information:                                                                       *
     9                                  ; Name:         Kaitlin Frani                                                               *
    10                                  ; Email:        kaitlinfrani@csu.fullerton.edu                                              *
    11                                  ; Institution:  California State University - Fullerton                                     *
    12                                  ; Course:       CPSC 240-05 Assembly Language                                               *
    13                                  ;                                                                                           *
    14                                  ;********************************************************************************************
    15                                  ; Copyright (C) 2021 Kaitlin Frani                                                          *
    16                                  ; This program is free software: you can redistribute it and/or modify it under the terms   *
    17                                  ; of the GNU General Public License version 3 as published by the Free Software Foundation. *
    18                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY  *
    19                                  ; without even the implied Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. *
    20                                  ; See the GNU General Public License for more details. A copy of the GNU General Public     *
    21                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    22                                  ;                                                                                           *
    23                                  ;********************************************************************************************
    24                                  ; Program information                                                                       *
    25                                  ;   Program name: Sum of Float Numbers in an Array                                          *
    26                                  ;   Programming languages: One module in C, One module in C++, Three modules in X86         *
    27                                  ;   Files in this program: control.asm, fill.asm, sum.asm, main.c, display.cpp              *
    28                                  ;                                                                                           *
    29                                  ;********************************************************************************************
    30                                  ; This File                                                                                 *
    31                                  ;    Name:      sum.asm                                                                     *
    32                                  ;    Purpose:   To add up all the floats in the array and return the sum back to control    *
    33                                  ;               as well as allow control return it to main.                                 *
    34                                  ;                                                                                           *
    35                                  ;********************************************************************************************
    36                                  
    37                                  global sum
    38                                  
    39                                  section .data
    40                                  
    41                                  section .bss
    42                                  
    43                                  section .text
    44                                  
    45                                  sum:
    46                                  
    47                                  ; Back up all registers to stack and set stack pointer to base pointer
    48 00000000 55                      push rbp
    49 00000001 4889E5                  mov rbp, rsp
    50 00000004 57                      push rdi
    51 00000005 56                      push rsi
    52 00000006 52                      push rdx
    53 00000007 51                      push rcx
    54 00000008 4150                    push r8
    55 0000000A 4151                    push r9
    56 0000000C 4152                    push r10
    57 0000000E 4153                    push r11
    58 00000010 4154                    push r12
    59 00000012 4155                    push r13
    60 00000014 4156                    push r14
    61 00000016 4157                    push r15
    62 00000018 53                      push rbx
    63 00000019 9C                      pushf
    64                                  
    65 0000001A 6AFF                    push qword -1
    66                                  
    67                                  ;-----------------------INITIALIZE PARAMETERS-----------------------------------------------
    68 0000001C 4989FF                  mov r15, rdi          ;copies array
    69 0000001F 4989F6                  mov r14, rsi          ;copies number of elements in the array to r14.
    70 00000022 41BD00000000            mov r13, 0            ;sum register to add
    71 00000028 41BC00000000            mov r12, 0            ;counter to iterate through array.
    72                                  
    73                                  ;-----------------------------------START LOOP----------------------------------------------
    74                                  begin_loop:
    75                                  
    76                                  ;compare counter to number of elements in array
    77 0000002E 4D39F4                  cmp r12, r14
    78 00000031 7D0B                    jge outofloop
    79                                  
    80                                  ;--------------------------------COPY INTO ARRAY--------------------------------------------
    81                                  ;add element of array to sum
    82 00000033 F2470F583CE7            addsd xmm15, [r15 + 8 * r12]
    83 00000039 49FFC4                  inc r12
    84                                  
    85                                  ; Restarts loop
    86 0000003C EBF0                    jmp begin_loop
    87                                  
    88                                  ;----------------------------------END OF LOOP----------------------------------------------
    89                                  outofloop:
    90                                  
    91                                  ; Restores all backed up registers to their original state.
    92 0000003E 58                      pop rax
    93 0000003F F2410F10C7              movsd xmm0, xmm15
    94 00000044 9D                      popf
    95 00000045 5B                      pop rbx
    96 00000046 415F                    pop r15
    97 00000048 415E                    pop r14
    98 0000004A 415D                    pop r13
    99 0000004C 415C                    pop r12
   100 0000004E 415B                    pop r11
   101 00000050 415A                    pop r10
   102 00000052 4159                    pop r9
   103 00000054 4158                    pop r8
   104 00000056 59                      pop rcx
   105 00000057 5A                      pop rdx
   106 00000058 5E                      pop rsi
   107 00000059 5F                      pop rdi
   108 0000005A 5D                      pop rbp
   109                                  
   110 0000005B C3                      ret
